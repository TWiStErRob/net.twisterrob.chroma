@host = http://192.168.0.30


###
POST {{host}}/xled/v1/login
Content-Type: application/json
Accept: application/json
# challenge: 12345678901234567890123456789012

{
	"challenge": "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI="
}

> {%
	client.test("Application response", function() {
		client.assert(response.body["code"] === 1000, "Response code is not 1000");
	});
	// {"authentication_token":"5jPe+ONhwUY=","authentication_token_expires_in":14400,"challenge-response":"8d87f080947e343180da3f411df3997e3e9ae0cc","code":1000}'
	client.global.set("token", response.body["authentication_token"]);
	client.global.set("challenge", response.body["challenge-response"]);
%}


###
POST {{host}}/xled/v1/verify
X-Auth-Token: {{token}}
Content-Type: application/json
Accept: application/json

{"challenge-response": "{{challenge}}"}

> {%
	client.test("Application response", function() {
		client.assert(response.body["code"] === 1000, "Response code was " + response.body["code"] + " instead of 1000");
	});
	client.global.clear("challenge");
%}


###
@new-movie = {{$uuid}}
POST {{host}}/xled/v1/movies/new
X-Auth-Token: {{token}}
Content-Type: application/json
Accept: application/json

{
	"descriptor_type": "rgb_raw",
	"fps": 40,
	"frames_number": 30,
	"id": 0,
	"leds_per_frame": 200,
	"name": "Heart",
	"unique_id": "{{new-movie}}"
}

> verify-app-response.js


###
POST {{host}}/xled/v1/movies/full
X-Auth-Token: {{token}}
Content-Type: application/octet-stream
Accept: application/json

< movies/generated-heart-v3.raw
> verify-app-response.js


###
POST {{host}}/xled/v1/led/mode
X-Auth-Token: {{token}}
Content-Type: application/json
Accept: application/json

{
	"mode": "movie",
	"unique_id": "",
	"name": "",
	"id": 0,
	"detect_mode": 0
}

> verify-app-response.js


###
POST {{host}}/xled/v1/movies/current
X-Auth-Token: {{token}}
Content-Type: application/json
Accept: application/json

{"unique_id":"{{new-movie}}"}

> verify-app-response.js
