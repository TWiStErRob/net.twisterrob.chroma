############################################################
#  	IntelliJ Logging Configuration File
#
# Add it to the :runIde task to make sure this file is used:
# ```gradle
# project.tasks.named("runIde").configure {
#   systemProperty(
#     "java.util.logging.config.file",
#     file("src/main/runtime/logging.properties")
#   )
# }
# ```
############################################################


############################################################
#  	WARNING: Most properties in this file can't be changed.
#
# Because IntelliJ Platform configures logging
# in com.intellij.idea.LoggerFactory,
# that will override any defaults set in this file.
#
# The lines starting with #! are flagging the lines that are
# set from code, and cannot be changed here.
############################################################


############################################################
#  	Global properties
############################################################

# Defined in com.intellij.idea.LoggerFactory.<init>
#! handlers=com.intellij.openapi.diagnostic.RollingFileHandler,\
#           java.util.logging.ConsoleHandler,\
#           com.intellij.diagnostic.DialogAppender

# Default global logging level.
# This specifies which kinds of events are logged across all loggers.
#! .level=INFO


############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# Defined in com.intellij.openapi.diagnostic.JulLogger.configureLogFileAndConsole
#! com.intellij.openapi.diagnostic.RollingFileHandler.level = FINEST
#! com.intellij.openapi.diagnostic.RollingFileHandler.logPath = ${idea.log.path}/idea.log
#! com.intellij.openapi.diagnostic.RollingFileHandler.limit = 10000000
#! com.intellij.openapi.diagnostic.RollingFileHandler.count = 12
#! com.intellij.openapi.diagnostic.RollingFileHandler.appendToFile = true
#! com.intellij.openapi.diagnostic.RollingFileHandler.formatter = IdeaLogRecordFormatter

# Defined in com.intellij.openapi.diagnostic.JulLogger.configureLogFileAndConsole
#! java.util.logging.ConsoleHandler.level = WARNING
#! java.util.logging.ConsoleHandler.formatter = IdeaLogRecordFormatter
#! java.util.logging.ConsoleHandler.formatter.showDateInConsole = true

# Defined in com.intellij.idea.LoggerFactory.<init>
#! com.intellij.diagnostic.DialogAppender.level = SEVERE


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# Note: any logger created by IntelliJ Platform will have a
# "#" character at the beginning. This includes creation from:
# * com.intellij.openapi.diagnostic.Logger.getInstance(Class<?>)
# * com.intellij.openapi.diagnostic.logger<T>() 
# * com.intellij.openapi.diagnostic.T.thisLogger()
# BUT not from
# * com.intellij.openapi.diagnostic.Logger.getInstance(java.lang.String)
# * java.util.logging.Logger.getLogger
# In properties files "#" character is comment,
# so needs to be escaped, which means lines will look like:
# ```
# # Make my project's logs visible:
# \#pack.age.level = ALL
# \#pack.age.ClassName.level = ALL
# ```

# .level: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL

# WARNING: the default console logger in configureLogFileAndConsole
# is hardcoded to WARNING, so levels below that will not show up
# in the console, unless we specify explicit handlers:
\#net.twisterrob.chroma.intellij.shortcuts.handlers = java.util.logging.ConsoleHandler

# and override the default console level.
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = com.intellij.openapi.diagnostic.IdeaLogRecordFormatter
# sadly this will double-log warnings, but better not having anything at all.

# Enable IntelliJ console logs from :idea module (IJ Logging over JUL).
\#net.twisterrob.chroma.intellij.shortcuts.level = ALL
# Enable IntelliJ console logs from :razer module (SLF4J over JUL).
net.twisterrob.chroma.razer.rest.level = INFO
